package com.fastcode.entitycodegen;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;

import java.io.File;
import java.io.IOException;
import java.lang.annotation.Annotation;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.assertj.core.api.Assertions;
import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Spy;
import org.slf4j.Logger;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.fastcode.codegen.CodeGeneratorUtils;
import com.fastcode.entitycodegen.EntityDetails;
import com.fastcode.entitycodegen.FieldDetails;
import com.fastcode.entitycodegen.JoinDetails;
import com.fastcode.entitycodegen.RelationDetails;
import com.fastcode.logging.LoggingHelper;


@RunWith(SpringJUnit4ClassRunner.class)
public class EntityDetailsTest {

	@Rule
	public TemporaryFolder folder= new TemporaryFolder(new File(System.getProperty("user.dir").toString()));

	@InjectMocks
	@Spy
	private EntityDetails entityDetails;

	@Mock
	private CodeGeneratorUtils mockedCodeGeneratorUtils;
	
	@Mock
    private Logger loggerMock;
   
	@Mock
	private LoggingHelper logHelper;

	File destPath;


	@Before
	public void setUp() throws Exception {
		MockitoAnnotations.initMocks(entityDetails);
		destPath = folder.newFolder("tempFolder");
		when(logHelper.getLogger()).thenReturn(loggerMock);
		doNothing().when(loggerMock).error(anyString());
	}

	@After
	public void tearDown() throws Exception {

	}

	@Test
	public void getFields_parametersAreValid_returnFieldsList() throws IOException, ClassNotFoundException
	{
		ArrayList<Class<?>> classes =loadClasses(); 
		List<FieldDetails> expected = new ArrayList<>();
		FieldDetails fDetails = new FieldDetails();
		fDetails.setFieldName("deactivatedOn");
		fDetails.setFieldType("Date");
		fDetails.setIsPrimaryKey(false);
		fDetails.setIsAutogenerated(false);
		fDetails.setIsNullable(true);
		fDetails.setLength(0);
	
		expected.add(fDetails);
		FieldDetails fDetails1 = new FieldDetails();
		fDetails1.setFieldName("id");
		fDetails1.setFieldType("Integer");
		fDetails1.setIsPrimaryKey(true);
		fDetails1.setIsAutogenerated(false);
		fDetails1.setLength(0);
		fDetails1.setIsNullable(true);
		
		expected.add(fDetails1);
		FieldDetails fDetails2 = new FieldDetails();
		fDetails2.setFieldName("ords");
		fDetails2.setFieldType("Set");
		fDetails2.setIsPrimaryKey(false);
		fDetails2.setIsAutogenerated(false);
		fDetails2.setLength(0);
		fDetails2.setIsNullable(true);
		expected.add(fDetails2);
	
		FieldDetails fDetails3 = new FieldDetails();
		fDetails3.setFieldName("name");
		fDetails3.setFieldType("String");
		fDetails3.setIsPrimaryKey(true);
		fDetails3.setIsAutogenerated(false);
		fDetails3.setIsNullable(true);
		fDetails3.setLength(0);
		expected.add(fDetails3);

		List<FieldDetails> actual = entityDetails.getFields("Cust", classes);
		
	   Assertions.assertThat(expected).contains(fDetails);
	   Assertions.assertThat(expected).contains(fDetails1);
	   Assertions.assertThat(expected).contains(fDetails2);
	   Assertions.assertThat(expected).contains(fDetails3);
	   Assertions.assertThat(expected).size().isEqualTo(actual.size());

	}

	@Test
	public void getTableName_annotationsArrayIsNotNull_returnString() throws ClassNotFoundException, IOException, InstantiationException, IllegalAccessException
	{
		ArrayList<Class<?>> classes =loadClasses();
		Class<?> myClass = classes.get(0);
		Object classObj = (Object) myClass.newInstance();
		Annotation[] classAnnotations=classObj.getClass().getAnnotations();

		Assertions.assertThat(entityDetails.getTableName(classAnnotations)).isEqualTo("addresses");
	}

	@Test
	public void convertCamelCaseToKebaCase_StringIsValid_ReturnString()
	{
		String str = "testString";
		Assertions.assertThat(entityDetails.camelCaseToKebabCase(str)).isEqualTo("test-string");
	}

	@Test
	public void findPrimaryKey_parametersAreValid_returnSring() throws ClassNotFoundException, IOException
	{
		String pKey = "id";
		ArrayList<Class<?>> classes =loadClasses();
		Assertions.assertThat(entityDetails.findPrimaryKey("com.nfin.test.domain.model.Temp.Ord", classes)).isEqualTo(pKey);
	}

	@Test
	public void findOneToManyJoinColFromChildEntity_entityHasJoinColumnAnnotation_returnMap() throws ClassNotFoundException, IOException
	{
		ArrayList<Class<?>> classes =loadClasses();

		Map<String, RelationDetails> relationMap = new HashMap<String, RelationDetails>();
		RelationDetails relationDetails = new RelationDetails();
		relationDetails.seteName("Checkouts");
		relationDetails.setcName("Books");
		relationDetails.setRelation("OneToMany");

		relationMap.put("Books-Checkouts", relationDetails);

		Assertions.assertThat(entityDetails.FindOneToManyJoinColFromChildEntity(relationMap, classes)).isEqualTo(relationMap);

	}

	@Test
	public void findOneToManyJoinColFromChildEntity_entityHasJoinColumnsAnnotation_returnMap() throws ClassNotFoundException, IOException
	{
		ArrayList<Class<?>> classes =loadClasses();

		Map<String, RelationDetails> relationMap = new HashMap<String, RelationDetails>();
		RelationDetails relationDetails = new RelationDetails();
		relationDetails.seteName("Ord");
		relationDetails.setcName("Cust");
		relationDetails.setRelation("OneToMany");

		relationMap.put("Books-Checkouts", relationDetails);

		Assertions.assertThat(entityDetails.FindOneToManyJoinColFromChildEntity(relationMap, classes)).isEqualTo(relationMap);

	}

	@Test
	public void findOneToOneJoinColFromChildEntity_entityHasJoinColumnAnnotation_returnMap() throws ClassNotFoundException, IOException
	{
		ArrayList<Class<?>> classes = loadClasses();

		Map<String, RelationDetails> relationMap = new HashMap<String, RelationDetails>();
		RelationDetails relationDetails = new RelationDetails();
		relationDetails.seteName("Addresses");
		relationDetails.setcName("Users");
		relationDetails.setRelation("OneToOne");

		relationMap.put("Books-Checkouts", relationDetails);

		Assertions.assertThat(entityDetails.FindOneToOneJoinColFromChildEntity(relationMap, classes)).isEqualTo(relationMap);

	}

	@Test
	public void retreiveEntityFieldsAndRships_oneToManyRelationWithJoinColumnAnnotation_returnEntityDetails() throws ClassNotFoundException, IOException
	{
		ArrayList<Class<?>> classes =loadClasses();
		EntityDetails details = new EntityDetails();
		Map<String, FieldDetails> fieldsMap = new HashMap<>();
		Map<String, RelationDetails> relationsMap = new HashMap<>();

		FieldDetails fDetails = new FieldDetails();
		fDetails.setFieldName("deactivatedOn");
		fDetails.setFieldType("Date");
		fDetails.setLength(255);
		fDetails.setIsPrimaryKey(false);

		FieldDetails fDetails1 = new FieldDetails();
		fDetails1.setFieldName("id");
		fDetails1.setFieldType("Integer");
		fDetails1.setLength(255);
		fDetails1.setIsPrimaryKey(true);
		fDetails1.setIsNullable(false);

		FieldDetails fDetails2 = new FieldDetails();
		fDetails2.setFieldName("ord");
		fDetails2.setFieldType("Ord");
		fDetails2.setLength(0);
		fDetails2.setIsPrimaryKey(false);

		FieldDetails fDetails3 = new FieldDetails();
		fDetails3.setFieldName("name");
		fDetails3.setFieldType("String");
		fDetails3.setIsPrimaryKey(true);
		fDetails3.setLength(100);
		fDetails3.setIsNullable(false);

		fieldsMap.put(fDetails.getFieldName(),fDetails);	
		fieldsMap.put(fDetails1.getFieldName(),fDetails1);	
		fieldsMap.put(fDetails2.getFieldName(),fDetails2);	
		fieldsMap.put(fDetails3.getFieldName(),fDetails3);	

		List<JoinDetails> joinDetailsList= new ArrayList<JoinDetails>();
		JoinDetails joinDetails=new JoinDetails();
		joinDetails.setJoinEntityName("Ord");
		joinDetails.setMappedBy("cust");

		joinDetailsList.add(joinDetails);

		RelationDetails rDetails= new RelationDetails();
		rDetails.seteName("Ord");
		rDetails.setcName("Cust");
		rDetails.setRelation("OneToMany");
		rDetails.setfName("ord");
		rDetails.seteModuleName("ords");
		rDetails.setJoinDetails(joinDetailsList);

		relationsMap.put("Cust-Ord", rDetails);
		Map<String, FieldDetails> sortedMap = new TreeMap<>(fieldsMap);
		details.setFieldsMap(sortedMap);
		details.setRelationsMap(relationsMap);
		details.setEntityTableName("cust");
		details.setIdClass("CustId");

		Mockito.doReturn("cust").when(entityDetails).getTableName(any(Annotation[].class));
		Mockito.doReturn("ords").when(entityDetails).camelCaseToKebabCase(anyString());
		Mockito.doReturn("id").when(entityDetails).findPrimaryKey(any(String.class), any(List.class));
		Mockito.doReturn(new ArrayList<FieldDetails>()).when(entityDetails).getFields(anyString(), any(List.class));

		Assertions.assertThat(entityDetails.retreiveEntityFieldsAndRships(classes.get(4), "com.nfin.test.domain.model.Temp.Cust", classes )).isEqualToComparingFieldByFieldRecursively(details);
	}

	@Test
	public void retreiveEntityFieldsAndRships_ManyToOneRelationWithJoinColumnsAnnotation_returnEntityDetails() throws ClassNotFoundException, IOException
	{
		ArrayList<Class<?>> classes =loadClasses();
		EntityDetails details = new EntityDetails();
		Map<String, FieldDetails> fieldsMap = new HashMap<>();
		Map<String, RelationDetails> relationsMap = new HashMap<>();

		FieldDetails fDetails = new FieldDetails();
		fDetails.setFieldName("createdOn");
		fDetails.setFieldType("Date");
		fDetails.setLength(255);
		fDetails.setIsNullable(false);
		fDetails.setIsPrimaryKey(false);

		FieldDetails fDetails1 = new FieldDetails();
		fDetails1.setFieldName("id");
		fDetails1.setFieldType("Integer");
		fDetails1.setLength(255);
		fDetails1.setIsPrimaryKey(true);
		fDetails1.setIsNullable(false);

		FieldDetails fDetails2 = new FieldDetails();
		fDetails2.setFieldName("cust");
		fDetails2.setFieldType("Cust");
		fDetails2.setLength(0);
		fDetails2.setIsPrimaryKey(false);

		FieldDetails fDetails3 = new FieldDetails();
		fDetails3.setFieldName("deactivatedOn");
		fDetails3.setFieldType("Date");
		fDetails3.setLength(255);
		fDetails3.setIsPrimaryKey(false);

		fieldsMap.put(fDetails.getFieldName(),fDetails);	
		fieldsMap.put(fDetails1.getFieldName(),fDetails1);	
		fieldsMap.put(fDetails2.getFieldName(),fDetails2);	
		fieldsMap.put(fDetails3.getFieldName(),fDetails3);	

		List<JoinDetails> joinDetailsList= new ArrayList<JoinDetails>();
		JoinDetails joinDetails=new JoinDetails();
		joinDetails.setJoinEntityName("Cust");
		joinDetails.setJoinColumnType("String");
		joinDetails.setJoinColumn("custName");
		joinDetails.setReferenceColumn("name");
		joinDetails.setIsJoinColumnOptional(false);
		//joinDetails.setMappedBy("cust");
		JoinDetails joinDetails1=new JoinDetails();
		joinDetails1.setJoinEntityName("Cust");
		joinDetails1.setJoinColumnType("Integer");

		joinDetails1.setJoinColumn("custId");
		joinDetails1.setReferenceColumn("id");
		joinDetails1.setIsJoinColumnOptional(false);


		joinDetailsList.add(joinDetails1);
		joinDetailsList.add(joinDetails);

		//details.set
		RelationDetails rDetails= new RelationDetails();
		rDetails.seteName("Cust");
		rDetails.setcName("Ord");
		rDetails.setRelation("ManyToOne");
		rDetails.setfName("cust");
		rDetails.seteModuleName("cust");
		rDetails.setJoinDetails(joinDetailsList);

		relationsMap.put("Ord-Cust", rDetails);
		Map<String, FieldDetails> sortedMap = new TreeMap<>(fieldsMap);
		details.setFieldsMap(sortedMap);
		details.setRelationsMap(relationsMap);
		details.setEntityTableName("ord");
		details.setIdClass("OrdId");

		Mockito.doReturn("ord").when(entityDetails).getTableName(any(Annotation[].class));
		Mockito.doReturn("cust").when(entityDetails).camelCaseToKebabCase(anyString());
		Mockito.doReturn("id").when(entityDetails).findPrimaryKey(any(String.class), any(List.class));
		Mockito.doReturn(new ArrayList<FieldDetails>()).when(entityDetails).getFields(anyString(), any(List.class));

		Assertions.assertThat(entityDetails.retreiveEntityFieldsAndRships(classes.get(5), "com.nfin.test.domain.model.Temp.Ord", classes )).isEqualToComparingFieldByFieldRecursively(details);
	}

	@Test
	public void retreiveEntityFieldsAndRships_OneToOneRelationWithJoinColumnAnnotation_returnEntityDetails() throws ClassNotFoundException, IOException
	{
		ArrayList<Class<?>> classes =loadClasses();
		EntityDetails details = new EntityDetails();
		Map<String, FieldDetails> fieldsMap = new HashMap<>();
		Map<String, RelationDetails> relationsMap = new HashMap<>();

		FieldDetails fDetails = new FieldDetails();
		fDetails.setFieldName("city");
		fDetails.setFieldType("String");
		fDetails.setLength(30);
		fDetails.setIsNullable(false);
		fDetails.setIsPrimaryKey(false);

		FieldDetails fDetails1 = new FieldDetails();
		fDetails1.setFieldName("addressId");
		fDetails1.setFieldType("Integer");
		fDetails1.setLength(255);
		fDetails1.setIsPrimaryKey(true);
		fDetails1.setIsNullable(false);

		FieldDetails fDetails2 = new FieldDetails();
		fDetails2.setFieldName("state");
		fDetails2.setFieldType("String");
		fDetails2.setLength(30);
		fDetails2.setIsNullable(false);
		fDetails2.setIsPrimaryKey(false);

		FieldDetails fDetails3 = new FieldDetails();
		fDetails3.setFieldName("street");
		fDetails3.setFieldType("String");
		fDetails3.setLength(30);
		fDetails3.setIsNullable(false);
		fDetails3.setIsPrimaryKey(false);

		FieldDetails fDetails4 = new FieldDetails();
		fDetails4.setFieldName("users");
		fDetails4.setFieldType("Users");

		fDetails4.setIsPrimaryKey(false);

		fieldsMap.put(fDetails.getFieldName(),fDetails);	
		fieldsMap.put(fDetails1.getFieldName(),fDetails1);	
		fieldsMap.put(fDetails2.getFieldName(),fDetails2);	
		fieldsMap.put(fDetails3.getFieldName(),fDetails3);	
		fieldsMap.put(fDetails4.getFieldName(),fDetails4);	

		List<JoinDetails> joinDetailsList= new ArrayList<JoinDetails>();
		JoinDetails joinDetails=new JoinDetails();
		joinDetails.setJoinEntityName("Users");
		joinDetails.setJoinColumnType("Integer");
		joinDetails.setJoinColumn("addressId");
		joinDetails.setMappedBy("");
		joinDetails.setReferenceColumn("id");
		joinDetails.setIsJoinColumnOptional(true);

		joinDetailsList.add(joinDetails);

		//details.set
		RelationDetails rDetails= new RelationDetails();
		rDetails.seteName("Users");
		rDetails.setcName("Addresses");
		rDetails.setRelation("OneToOne");
		rDetails.setfName("users");
		rDetails.seteModuleName("users");
		rDetails.setJoinDetails(joinDetailsList);

		relationsMap.put("Addresses-Users", rDetails);
		Map<String, FieldDetails> sortedMap = new TreeMap<>(fieldsMap);
		details.setFieldsMap(sortedMap);
		details.setRelationsMap(relationsMap);
		details.setEntityTableName("addresses");
		details.setIdClass("AddressesId");

		Mockito.doReturn("addresses").when(entityDetails).getTableName(any(Annotation[].class));
		Mockito.doReturn("users").when(entityDetails).camelCaseToKebabCase(anyString());
		Mockito.doReturn("id").when(entityDetails).findPrimaryKey(any(String.class), any(List.class));
		Mockito.doReturn(new ArrayList<FieldDetails>()).when(entityDetails).getFields(anyString(), any(List.class));

		Assertions.assertThat(entityDetails.retreiveEntityFieldsAndRships(classes.get(0), "com.nfin.test.domain.model.Temp.Addresses", classes )).isEqualToComparingFieldByFieldRecursively(details);
	}


	private ArrayList<Class<?>> loadClasses() throws ClassNotFoundException, IOException
	{
		List<String> filesList = new ArrayList<String>();
		filesList.add("com.nfin.test.domain.model.Temp.Addresses");
		filesList.add("com.nfin.test.domain.model.Temp.Books");
		filesList.add("com.nfin.test.domain.model.Temp.Checkouts");
		filesList.add("com.nfin.test.domain.model.Temp.CustId");
		filesList.add("com.nfin.test.domain.model.Temp.Cust");
		filesList.add("com.nfin.test.domain.model.Temp.Ord");
		filesList.add("com.nfin.test.domain.model.Temp.Reviews");
		filesList.add("com.nfin.test.domain.model.Temp.Users");
		String path = System.getProperty("user.dir").replace("\\", "/");
		System.out.println(" aa " + path);

		URLClassLoader urlClassLoader = new URLClassLoader(new URL[]{new File(path).toURI().toURL()},Thread.currentThread().getContextClassLoader());
		ArrayList<Class<?>> classes = new ArrayList<Class<?>>();

		for (String fileName : filesList) {

			Class<?> cs = urlClassLoader.loadClass(fileName);

			classes.add(cs);
		}

		urlClassLoader.close();
		return classes;
	}
	
	

}
