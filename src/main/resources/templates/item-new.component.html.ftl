<div class="create-item">
  <mat-card>
    <mat-card-header>
      <mat-card-title>{{title}}</mat-card-title>
      <a href="javascript:void(0)" (click)="onCancel()" class="cancle-btn"><i
          class="material-icons">add_circle</i></a>
    </mat-card-header>
    <mat-card-content>
  		<form [formGroup]="itemForm" #itemNgForm="ngForm" (ngSubmit)="onSubmit()" class="item-form">
  		<#list Fields as key,value>
  		<#-- to exclude the duplicate fields(join columns) -->
  		<#assign isJoinColumn = false>
  		<#if Relationship?has_content>
  		<#list Relationship as relationKey, relationValue>
  		<#if relationValue.relation == "ManyToOne" || (relationValue.relation == "OneToOne" && relationValue.isParent == false)>
  		<#list relationValue.joinDetails as joinDetails>
          <#if joinDetails.joinEntityName == relationValue.eName>
          <#if joinDetails.joinColumn??>
          <#if joinDetails.joinColumn == key>
          <#assign isJoinColumn = true>
          </#if>
          </#if>
  		</#if>
  		</#list>
  		</#if>
  		</#list>
  		</#if>
  		
  		<#if AuthenticationType == "database" && ClassName == AuthenticationTable>  
  		<#if AuthenticationFields?? && isJoinColumn == false>
  		<#if AuthenticationFields.Password.fieldName != value.fieldName>
  		<#if value.fieldType?lower_case == "boolean">
  		  <div class="checkbox-container">
          <mat-checkbox formControlName="[=value.fieldName]">[=value.fieldName]</mat-checkbox>
  		  </div>
  		<#elseif value.fieldType?lower_case == "date">
  			<mat-form-field>
  				<input formControlName="[=value.fieldName]" matInput [matDatepicker]="[=value.fieldName]Picker" placeholder="Enter [=value.fieldName]">
  				<mat-datepicker-toggle matSuffix [for]="[=value.fieldName]Picker"></mat-datepicker-toggle>
  				<mat-datepicker #[=value.fieldName]Picker></mat-datepicker>
  				<#if value.isNullable == false>
  				<mat-error *ngIf="!itemForm.get('[=value.fieldName]').valid && itemForm.get('[=value.fieldName]').touched">[=value.fieldName] is required</mat-error>
  				</#if>
  			</mat-form-field>
  		<#elseif value.fieldType?lower_case == "string">
  			<mat-form-field>
  				<input formControlName="[=value.fieldName]" matInput placeholder="Enter [=value.fieldName]">
  				<#if value.isNullable == false>
  				<mat-error *ngIf="!itemForm.get('[=value.fieldName]').valid && itemForm.get('[=value.fieldName]').touched">[=value.fieldName] is required</mat-error>
  			    </#if>
  			</mat-form-field>
  		<#elseif !value.isAutogenerated && (value.fieldType?lower_case == "long" ||  value.fieldType?lower_case == "integer" ||  value.fieldType?lower_case == "short" ||  value.fieldType?lower_case == "double")>
  			<mat-form-field>
  				<input type="number" formControlName="[=value.fieldName]" matInput placeholder="Enter [=value.fieldName]">
  				<#if value.isNullable == false>
  				<mat-error *ngIf="!itemForm.get('[=value.fieldName]').valid && itemForm.get('[=value.fieldName]').touched">[=value.fieldName] is required</mat-error>
  			    </#if>
  			</mat-form-field>
  		</#if>
  		<#else>
  			<mat-form-field>
  				<input type="password"matInput placeholder="New password" formControlName="[=value.fieldName]" required>
  				<mat-error *ngIf="itemForm.hasError('required', 'password')">
  					{{'GENERAL.ERRORS.REQUIRED' | translate}}
  				</mat-error>
  			</mat-form-field>
  
  			<mat-form-field>
  				<input matInput type="password" placeholder="Confirm password" formControlName="confirmPassword"
  				pattern="{{ itemForm.get('[=value.fieldName]').value }}">
  				<mat-error *ngIf="!itemForm.get('confirmPassword').valid && itemForm.get('confirmPassword').touched">
  					{{'GENERAL.ERRORS.PASSWORD-MISMATCH' | translate}}
  				</mat-error>
  			</mat-form-field>
  		</#if>
  		</#if>
  		<#else>
  		<#if isJoinColumn == false>
      	<#if value.fieldType?lower_case == "boolean">    
      	<div class="checkbox-container">
          <mat-checkbox formControlName="[=value.fieldName]">[=value.fieldName]</mat-checkbox>
        </div>         
  		<#elseif value.fieldType == "Date">
  			<mat-form-field>
  				<input formControlName="[=value.fieldName]" matInput [matDatepicker]="[=value.fieldName]Picker" placeholder="Enter [=value.fieldName]">
  				<mat-datepicker-toggle matSuffix [for]="[=value.fieldName]Picker"></mat-datepicker-toggle>
  				<mat-datepicker #[=value.fieldName]Picker></mat-datepicker>
  				<#if value.isNullable == false>
  				<mat-error *ngIf="!itemForm.get('[=value.fieldName]').valid && itemForm.get('[=value.fieldName]').touched">{{'GENERAL.ERRORS.REQUIRED' | translate}}</mat-error>
  				</#if>
  			</mat-form-field>
  		<#elseif value.fieldType?lower_case == "string">
  			<mat-form-field>
  				<input formControlName="[=value.fieldName]" matInput placeholder="Enter [=value.fieldName]">
  				<#if value.isNullable == false>
  				<mat-error *ngIf="!itemForm.get('[=value.fieldName]').valid && itemForm.get('[=value.fieldName]').touched">{{'GENERAL.ERRORS.REQUIRED' | translate}}</mat-error>
  				</#if>
  			</mat-form-field>
  		<#elseif !value.isAutogenerated && (value.fieldType?lower_case == "long" ||  value.fieldType?lower_case == "integer" ||  value.fieldType?lower_case == "short" ||  value.fieldType?lower_case == "double")>
  			<mat-form-field>
  				<input type="number" formControlName="[=value.fieldName]" matInput placeholder="Enter [=value.fieldName]">
  				<#if value.isNullable == false>
  			    <mat-error *ngIf="!itemForm.get('[=value.fieldName]').valid && itemForm.get('[=value.fieldName]').touched">{{'GENERAL.ERRORS.REQUIRED' | translate}}</mat-error>
  				</#if>
  			</mat-form-field>
  		</#if>
      	</#if>
      	</#if>
      	</#list>
			  <mat-form-field *ngFor="let association of parentAssociations">
          <input type="text" matInput formControlName="{{association.descriptiveField}}"
            placeholder="{{association.table}}" aria-label="Number" [matAutocomplete]="auto"
            (click)="selectAssociation(association)" required>
          <mat-autocomplete (optionSelected)="onAssociationOptionSelected($event, association)" autoActiveFirstOption #auto="matAutocomplete" (optionsScroll)="onPickerScroll(association)">
            <mat-option *ngFor="let option of association.data" [value]="option">
              {{option[association.referencedDescriptiveField]}}
            </mat-option>
          </mat-autocomplete>
        </mat-form-field> 
  		</form>
    </mat-card-content>
    <mat-card-actions class="fb-text-right">
      <button mat-raised-button color="primary" (click)="itemNgForm.ngSubmit.emit()"
        [disabled]="!itemForm.valid || loading <#if AuthenticationType != "none">|| !IsCreatePermission</#if>">{{'GENERAL.ACTIONS.SAVE' | translate}}</button>
    </mat-card-actions>
  </mat-card>
</div>
