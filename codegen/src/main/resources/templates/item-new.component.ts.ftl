import { Component, OnInit, Inject } from '@angular/core';
import { [=ClassName]Service } from './[=ModuleName].service';
import { [=IEntity] } from './[=IEntityFile]';

import { ActivatedRoute,Router} from "@angular/router";
import { FormBuilder, FormGroup, Validators} from '@angular/forms';
import { first } from 'rxjs/operators';
import { Globals, BaseNewComponent, PickerDialogService, ErrorService } from 'fastCodeCore';
import { MatDialogRef, MatDialog, MAT_DIALOG_DATA } from '@angular/material/dialog';

<#if Relationship?has_content>
<#list Relationship as relationKey, relationValue>
<#if relationValue.relation == "ManyToOne" || (relationValue.relation == "OneToOne" && relationValue.isParent == false)>
import { [=relationValue.eName]Service } from '../[=relationValue.eModuleName]/[=relationValue.eModuleName].service';
</#if>
</#list>
</#if>
<#if AuthenticationType != "none" && ClassName == AuthenticationTable>
import { RoleService} from '../role/role.service';
</#if>
<#if AuthenticationType !="none" >
import { GlobalPermissionService } from 'fastCodeCore';
</#if>

@Component({
  selector: 'app-[=ModuleName]-new',
  templateUrl: './[=ModuleName]-new.component.html',
  styleUrls: ['./[=ModuleName]-new.component.scss']
})
export class [=ClassName]NewComponent extends BaseNewComponent<[=IEntity]> implements OnInit {
  
    title:string = "New [=ClassName]";
	constructor(
		public formBuilder: FormBuilder,
		public router: Router,
		public route: ActivatedRoute,
		public dialog: MatDialog,
		public dialogRef: MatDialogRef<[=ClassName]NewComponent>,
		@Inject(MAT_DIALOG_DATA) public data: any,
		public global: Globals,
		public pickerDialogService: PickerDialogService,
		public dataService: [=ClassName]Service,
		public errorService: ErrorService,
		<#if Relationship?has_content>
		<#list Relationship as relationKey, relationValue>
		<#if relationValue.relation == "ManyToOne" || (relationValue.relation == "OneToOne" && relationValue.isParent == false)>
		public [=relationValue.eName?uncap_first]Service: [=relationValue.eName]Service,
		</#if>
		</#list>
		</#if>
		<#if AuthenticationType != "none" && ClassName == AuthenticationTable>
		public roleService: RoleService,
		</#if>
		<#if AuthenticationType !="none" >
		public globalPermissionService: GlobalPermissionService,
		</#if>
	) {
		super(formBuilder, router, route, dialog, dialogRef, data, global, pickerDialogService, dataService, errorService);
	}
 
	ngOnInit() {
      	<#if Relationship?has_content>
		this.setAssociations();
		</#if>
		super.ngOnInit();
		this.itemForm = this.formBuilder.group({
			<#list Fields as key,value>
    		<#if !value.isAutogenerated && (value.fieldType?lower_case == "date" || value.fieldType?lower_case == "string" || value.fieldType?lower_case == "long" ||  value.fieldType?lower_case == "integer" ||  value.fieldType?lower_case == "short" ||  value.fieldType?lower_case == "double")>
			<#if value.isNullable == false>
			[=value.fieldName]: ['', Validators.required],
			<#else>
			[=value.fieldName]: [''],
			</#if>
			<#elseif value.fieldType?lower_case == "boolean">
			<#if value.isNullable == false>
			[=value.fieldName]: [false, Validators.required],
			<#else>
			[=value.fieldName]: [false],
			</#if>
			</#if>
			</#list>
			<#if AuthenticationType != "none" && ClassName == AuthenticationTable>
			confirmPassword: ['', Validators.required],
			</#if>
			<#if Relationship?has_content>
			<#list Relationship as relationKey, relationValue>
			<#if relationValue.relation == "ManyToOne" || (relationValue.relation == "OneToOne" && relationValue.isParent == false)>
			<#list relationValue.joinDetails as joinDetails>
            <#if joinDetails.joinEntityName == relationValue.eName>
            <#if joinDetails.joinColumn??>
            <#if !Fields[joinDetails.joinColumn]?? && !(DescriptiveField[relationValue.eName]?? && (joinDetails.joinColumn == relationValue.eName?uncap_first + DescriptiveField[relationValue.eName].fieldName?cap_first ))>
			<#if joinDetails.isJoinColumnOptional==false>          
			[=joinDetails.joinColumn]: ['', Validators.required],
			<#else>
			[=joinDetails.joinColumn]: [''],
			</#if>
            </#if>
            </#if>
            </#if>
            </#list>
            <#if DescriptiveField[relationValue.eName]?? && DescriptiveField[relationValue.eName].description??>
			[=DescriptiveField[relationValue.eName].description?uncap_first] : [{ value: '', disabled: true }],
			</#if>
			</#if>
			</#list>
			</#if>
			<#if AuthenticationType != "none" && ClassName == AuthenticationTable>
			roleId: [''],
			roleDescriptiveField : [{ value: '', disabled: true }],
			</#if>
		});
		this.checkPassedData();
    }
 		
	<#if Relationship?has_content> 
		setAssociations(){
	  	
			this.associations = [
			<#list Relationship as relationKey, relationValue>
			<#if (relationValue.relation == "OneToOne" && relationValue.isParent == false) || relationValue.relation == "ManyToOne">
				{
					column: [
					    <#list relationValue.joinDetails as joinDetails>
	                    <#if joinDetails.joinEntityName == relationValue.eName>
	                    <#if joinDetails.joinColumn??>
						{
							key: '[=joinDetails.joinColumn]',
							value: undefined,
							referencedkey: '[=joinDetails.referenceColumn]'
						},
						</#if>
	                    </#if>
	                    </#list>
						  
					],
					isParent: false,
					table: '[=relationValue.eName?lower_case]',
					type: '[=relationValue.relation]',
					service: this.[=relationValue.eName?uncap_first]Service,
					<#if DescriptiveField[relationValue.eName]?? && DescriptiveField[relationValue.eName].description??>
					descriptiveField: '[=DescriptiveField[relationValue.eName].description?uncap_first]',
					referencedDescriptiveField: '[=DescriptiveField[relationValue.eName].fieldName]',
					</#if>
			    
				},
			</#if>
			</#list>
			<#if AuthenticationType != "none" && ClassName == AuthenticationTable>
				{
					column: [
						{
							key: 'roleId',
							value: undefined,
							referencedkey: 'id'
						},
					],
					isParent: false,
					table: 'role',
					type: 'ManyToOne',
					service: this.roleService,
					descriptiveField: 'roleDescriptiveField',
					referencedDescriptiveField: 'name',
				},	
			</#if>
			];
			this.parentAssociations = this.associations.filter(association => {
				return (!association.isParent);
			});
	
		}
	  </#if>   
    
}
