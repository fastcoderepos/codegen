package [=PackageName].application.[=ClassName].Dto;

import java.util.Date;
public class Update[=ClassName]Input {

<#list Fields as key,value>
 <#if value.isAutogenerated == false>
 <#if value.fieldType?lower_case == "long" || value.fieldType?lower_case == "integer" || value.fieldType?lower_case == "short" || value.fieldType?lower_case == "double" || value.fieldType?lower_case == "boolean" || value.fieldType?lower_case == "date" || value.fieldType?lower_case == "string">
  private [=value.fieldType] [=value.fieldName];
 </#if> 
 </#if> 
</#list>
<#list Relationship as relationKey,relationValue>
<#if relationValue.relation == "ManyToOne">
 <#if CompositeKeyClasses?seq_contains(ClassName)>
 <#if !Fields[relationValue.joinColumn]?? >
 private [=relationValue.joinColumnType] [=relationValue.joinColumn];
 </#if>
 <#else>
 private [=relationValue.joinColumnType] [=relationValue.joinColumn];
 </#if>
</#if>
</#list>

<#list Relationship as relationKey,relationValue>
<#if relationValue.relation == "ManyToOne">
  <#if CompositeKeyClasses?seq_contains(ClassName)>
  <#if !Fields[relationValue.joinColumn]?? >
  <#if relationValue.joinColumnType?lower_case == "long">
  public Long get[=relationValue.joinColumn?cap_first]() {
  return [=relationValue.joinColumn];
  }

  public void set[=relationValue.joinColumn?cap_first](Long [=relationValue.joinColumn]){
  this.[=relationValue.joinColumn] = [=relationValue.joinColumn];
  }
  <#elseif relationValue.joinColumnType?lower_case == "integer">
  public Integer get[=relationValue.joinColumn?cap_first]() {
  return [=relationValue.joinColumn];
  }

  public void set[=relationValue.joinColumn?cap_first](Integer [=relationValue.joinColumn]){
  this.[=relationValue.joinColumn] = [=relationValue.joinColumn];
  }
  <#elseif relationValue.joinColumnType?lower_case == "short">
  public Short get[=relationValue.joinColumn?cap_first]() {
  return [=relationValue.joinColumn];
  }

  public void set[=relationValue.joinColumn?cap_first](Short [=relationValue.joinColumn]){
  this.[=relationValue.joinColumn] = [=relationValue.joinColumn];
  }
  <#elseif relationValue.joinColumnType?lower_case == "double">
  public Double get[=relationValue.joinColumn?cap_first]() {
  return [=relationValue.joinColumn];
  }

  public void set[=relationValue.joinColumn?cap_first](Double [=relationValue.joinColumn]){
  this.[=relationValue.joinColumn] = [=relationValue.joinColumn];
  }
  </#if>
  </#if>
  <#else>
  <#if relationValue.joinColumnType?lower_case == "long">
  public Long get[=relationValue.joinColumn?cap_first]() {
  return [=relationValue.joinColumn];
  }

  public void set[=relationValue.joinColumn?cap_first](Long [=relationValue.joinColumn]){
  this.[=relationValue.joinColumn] = [=relationValue.joinColumn];
  }
  <#elseif relationValue.joinColumnType?lower_case == "integer">
  public Integer get[=relationValue.joinColumn?cap_first]() {
  return [=relationValue.joinColumn];
  }

  public void set[=relationValue.joinColumn?cap_first](Integer [=relationValue.joinColumn]){
  this.[=relationValue.joinColumn] = [=relationValue.joinColumn];
  }
  <#elseif relationValue.joinColumnType?lower_case == "short">
  public Short get[=relationValue.joinColumn?cap_first]() {
  return [=relationValue.joinColumn];
  }

  public void set[=relationValue.joinColumn?cap_first](Short [=relationValue.joinColumn]){
  this.[=relationValue.joinColumn] = [=relationValue.joinColumn];
  }
  <#elseif relationValue.joinColumnType?lower_case == "double">
  public Double get[=relationValue.joinColumn?cap_first]() {
  return [=relationValue.joinColumn];
  }

  public void set[=relationValue.joinColumn?cap_first](Double [=relationValue.joinColumn]){
  this.[=relationValue.joinColumn] = [=relationValue.joinColumn];
  }
</#if> 
</#if>
</#if>
</#list>
<#list Fields as key,value>
 <#if value.isAutogenerated == false>
  <#if value.fieldType?lower_case == "long" || value.fieldType?lower_case == "integer" || value.fieldType?lower_case == "short" || value.fieldType?lower_case == "double" || value.fieldType?lower_case == "boolean"|| value.fieldType?lower_case == "date"|| value.fieldType?lower_case == "string" >
  public [=value.fieldType?cap_first] get[=value.fieldName?cap_first]() {
  return [=value.fieldName];
  }

  public void set[=value.fieldName?cap_first]([=value.fieldType?cap_first] [=value.fieldName]){
  this.[=value.fieldName] = [=value.fieldName];
  }
 </#if> 
</#if>
</#list>
 
}
